/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUIPackage;
import sqlitechinookcw.Parcel;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import sqlitechinookcw.Media_types;
import sqlitechinookcw.Track;
import java.awt.print.*;
import javax.print.Doc;
import javax.print.DocFlavor;
import javax.print.DocPrintJob;
import javax.print.PrintException;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.SimpleDoc;
import javax.print.attribute.PrintServiceAttribute;
import javax.print.attribute.standard.PrinterName;
import sqlitechinookcw.PrintableObject;
import sqlitechinookcw.Util;


/**
 *
 * @author safwatn
 */
public class MyGUI extends javax.swing.JFrame {

    Track track = new Track();
    Media_types media = new Media_types();
    /**
     * Creates new form MyGUI
     */
    public MyGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        connectButton = new javax.swing.JButton();
        labelStatus = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        boxForMedia = new javax.swing.JTextArea();
        listMediaTypes = new javax.swing.JButton();
        listTracks = new javax.swing.JButton();
        printTracksButton = new javax.swing.JButton();
        printMediaButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        boxForTrack = new javax.swing.JTextArea();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        labelStatus.setText("Status");

        jLabel1.setText("Welcome to the Music Portal!");

        jLabel2.setText("Tracks");

        jLabel3.setText("Media Types");

        boxForMedia.setColumns(20);
        boxForMedia.setRows(5);
        jScrollPane1.setViewportView(boxForMedia);

        listMediaTypes.setText("View all media types");
        listMediaTypes.setToolTipText("");
        listMediaTypes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listMediaTypesActionPerformed(evt);
            }
        });

        listTracks.setText("View all tracks");
        listTracks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listTracksActionPerformed(evt);
            }
        });

        printTracksButton.setText("Print Tracks");
        printTracksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printTracksButtonActionPerformed(evt);
            }
        });

        printMediaButton.setText("Print Media Types");
        printMediaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printMediaButtonActionPerformed(evt);
            }
        });

        boxForTrack.setColumns(20);
        boxForTrack.setRows(5);
        jScrollPane4.setViewportView(boxForTrack);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(94, 94, 94)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(connectButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(listTracks)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(printTracksButton)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(66, 66, 66)
                                .addComponent(listMediaTypes)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(printMediaButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(193, 193, 193)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(labelStatus)))))
                .addContainerGap(320, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(connectButton)
                    .addComponent(labelStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listTracks)
                    .addComponent(printMediaButton)
                    .addComponent(printTracksButton)
                    .addComponent(listMediaTypes))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(412, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        // TODO add your handling code here:
        reconnectToServer();
    }//GEN-LAST:event_connectButtonActionPerformed

    private void listTracksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listTracksActionPerformed
        // TODO add your handling code here:
        listAllTracks();
    }//GEN-LAST:event_listTracksActionPerformed

    private void listMediaTypesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listMediaTypesActionPerformed
        // TODO add your handling code here:
        listAllMediaTypes();
    }//GEN-LAST:event_listMediaTypesActionPerformed

    private void printTracksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printTracksButtonActionPerformed
        // TODO add your handling code here:
        printAllTracks();
    }//GEN-LAST:event_printTracksButtonActionPerformed

    private void printMediaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printMediaButtonActionPerformed
        // TODO add your handling code here:
        printAllMedia();
    }//GEN-LAST:event_printMediaButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MyGUI().setVisible(true);
            }
        });
    }

    private void closeConnection() {
        
        if (socket != null) {
            labelStatus.setText("Status: closing connection");
            try {
                socket.close();
            } catch (IOException ex) {
                Logger.getLogger(MyGUI.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                socket = null;
            }
        }
    }

    
     private void reconnectToServer() {
        closeConnection();
        labelStatus.setText("Status: Attempting connection to server");
        try {
            socket = new Socket("127.0.0.1", 2000);

            objectInputStream = new ObjectInputStream(socket.getInputStream());
            objectOutputStream = new ObjectOutputStream(socket.getOutputStream());
            labelStatus.setText("Status: Connected to server");
        } catch (IOException ex) {
            Logger.getLogger(MyGUI.class.getName()).log(Level.SEVERE, null, ex);
            //labelStatus.setText(ex.toString()); // connection failed
            labelStatus.setText("Status: Server not found!"); // connection failed
        }
    }
     
     public void keepReadingFromServer() {
        while (true) {
            try {
                Object message;
                message = objectInputStream.readObject();

            } catch (IOException ex) {
                Logger.getLogger(MyGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(MyGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
     
    private void listAllTracks(){
            //Sending
            if (objectOutputStream != null && objectInputStream != null) {
            
            //Track track = new Track();
            track.setTrackSending(true);
            
            
            try {
                objectOutputStream.writeObject(new Parcel(track, media));
            } catch (IOException ex) {
                Logger.getLogger(MyGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            //Recieving
            Parcel reply = null;
            try {
                reply = (Parcel)objectInputStream.readObject();
                //reply = objectInputStream.readObject();
                ArrayList<Track> tracks = reply.getTrackList();
                for(Track t : tracks){
                    System.out.print(t);
                    System.out.print(" | ");
                    System.out.println("\n");
                }
            } catch (IOException ex) {
                Logger.getLogger(MyGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(MyGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            labelStatus.setText("Status: waiting for reply from server");
            //reply = (Parcel)objectInputStream.readObject();
            labelStatus.setText("Status: received reply from server");

            // 4. display message on textarea
            
            if (reply != null) {
                
                boxForTrack.setText(reply.getTrackList().toString());
                
            }
         else {
            labelStatus.setText("You must connect to the server first!!");
        }
        }
        
    }
    
    private void listAllMediaTypes() {
        //Sending
            if (objectOutputStream != null && objectInputStream != null) {
            
            //Media_types media = new Media_types();
            media.setMediaSending(true);
            
            
            try {
                objectOutputStream.writeObject(new Parcel(track, media));
            } catch (IOException ex) {
                Logger.getLogger(MyGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            //Recieving
            Parcel reply = null;
            try {
                reply = (Parcel)objectInputStream.readObject();
                //reply = objectInputStream.readObject();
                ArrayList<Media_types> medias = reply.getMediaList();
                for(Media_types m : medias){
                    System.out.print(m);
                    System.out.print(" | ");
                    System.out.println("\n");
                }
            } catch (IOException ex) {
                Logger.getLogger(MyGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(MyGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            labelStatus.setText("Status: waiting for reply from server");
            //reply = (Parcel)objectInputStream.readObject();
            labelStatus.setText("Status: received reply from server");

            // Print the tracks
            
            if (reply != null) {
                
                boxForMedia.setText(reply.getMediaList().toString());
                
            }
         else {
            labelStatus.setText("You must connect to the server first!!");
        }
        }
        
    }
    
    
    private void printAllTracks(){
            
            //Sending
            if (objectOutputStream != null && objectInputStream != null) {
            
            //Media_types media = new Media_types();
            track.setTrackSending(true);
            
            
            try {
                objectOutputStream.writeObject(new Parcel(track, media));
            } catch (IOException ex) {
                Logger.getLogger(MyGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
    
        
            
            //Recieving
            Parcel reply = null;
            try {
                reply = (Parcel)objectInputStream.readObject();
                
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(MyGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            labelStatus.setText("Status: waiting for reply from server");
            //reply = (Parcel)objectInputStream.readObject();
            labelStatus.setText("Status: received reply from server");
            
            
            if (reply != null) {
                
                    PrinterJob printer = PrinterJob.getPrinterJob(); // this method calls to setup a job for printing pages
                    String printableString = Util.getFormattedMediaStringFromList(reply.getMediaList());
                    PrintableObject p = new PrintableObject();
                    p.stringToPrint = printableString;
                    printer.setPrintable(p);
   	            printer.printDialog(); // show the print dialog
  
                try {
                     printer.print(); //if clicking ok in the print dialog, this will print the pages with the default format
                }
                catch (PrinterException PrintException) { //catch the error during printing
                }
                
            }
            
            else {
            labelStatus.setText("You must connect to the server first!!");
            }

            
            } 
            
    }
    
    private void printAllMedia(){
            //Sending
            if (objectOutputStream != null && objectInputStream != null) {
            
            //Media_types media = new Media_types();
            media.setMediaSending(true);
            
            
            try {
                objectOutputStream.writeObject(new Parcel(track, media));
            } catch (IOException ex) {
                Logger.getLogger(MyGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            //Recieving
            Parcel reply = null;
            try {
                reply = (Parcel)objectInputStream.readObject();
                //reply = objectInputStream.readObject();
                
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(MyGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            labelStatus.setText("Status: waiting for reply from server");
            //reply = (Parcel)objectInputStream.readObject();
            labelStatus.setText("Status: received reply from server");

            // Print the tracks
            
            if (reply != null) {
                
                    PrinterJob printer = PrinterJob.getPrinterJob(); // this method calls to setup a job for printing pages
                    String printableString = Util.getFormattedMediaStringFromList(reply.getMediaList());
                    PrintableObject p = new PrintableObject();
                    p.stringToPrint = printableString;
                    printer.setPrintable(p);
   	            printer.printDialog(); // show the print dialog
  
                try {
                     printer.print(); //if clicking ok in the print dialog, this will print the pages with the default format
                }
                catch (PrinterException PrintException) { //catch the error during printing
                }
                
            }
         else {
            labelStatus.setText("You must connect to the server first!!");
        }
        }
    
    
    }
     
    
    private Socket socket;
    private ObjectOutputStream objectOutputStream;
    private ObjectInputStream objectInputStream;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea boxForMedia;
    private javax.swing.JTextArea boxForTrack;
    private javax.swing.JButton connectButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel labelStatus;
    private javax.swing.JButton listMediaTypes;
    private javax.swing.JButton listTracks;
    private javax.swing.JButton printMediaButton;
    private javax.swing.JButton printTracksButton;
    // End of variables declaration//GEN-END:variables
}
